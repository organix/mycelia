#
# Lambda Calculus
#

#
# De Bruijn indexed variables
#

CREATE a_empty WITH \(cust, _).[ SEND ? TO cust ]
LET bound_beh(value, next) = \(cust, index).[
	LET index' = $sub(index, 1) IN
	CASE sub(index, 1) OF
	0 : [ SEND value TO cust ]
	_ : [ SEND (cust, index') TO next ]
	END
]

LET EVAL = 0
LET APPLY = 1

LET const_beh(value) = \(cust, $EVAL, _).[ SEND value TO cust ]
LET var_beh(index) = \(cust, $EVAL, env).[ SEND (cust, index) TO env ]

#
# separate behaviors for each continuation
#

CREATE a_undef WITH \_.[]
CREATE a_empty_env WITH \(cust, _).[ SEND a_undef TO cust ]
LET b_binding(name, value, next) = \msg.[
	CASE msg OF
	(cust, $name) : [ SEND value TO cust ]
	_ : [ SEND msg TO next ]
	END
]

LET b_literal(value) = \(cust, #eval, _).[ SEND value TO cust ]
LET b_variable(name) = \(cust, #eval, env).[ SEND (cust, name) TO env ]
LET b_lambda(name, body) = \(cust, #eval, env).[
	CREATE closure WITH b_closure(name, body, env)
	SEND closure TO cust
]
LET b_application(lambda, expr) = \(cust, #eval, env).[
	SEND (k_eval, #eval, env) TO lambda
	CREATE k_eval WITH b_applicative(cust, expr, env)
]
LET b_applicative(cust, expr, env) = \closure.[
	SEND (SELF, #eval, env) TO expr
	BECOME b_operative(cust, closure, env)
]
LET b_operative(cust, closure, env) = \arg.[
	SEND (cust, #apply, arg, env) TO closure
]
LET b_closure(name, body, env) = \(cust, #apply, arg, _).[
	CREATE env' WITH b_binding(name, arg, env)
	SEND (cust, #eval, env') TO body
]

#
# pure-functional conditional test-case
#

# LET fn_true = \cnsq.\altn.cnsq
CREATE fn_true
	WITH b_closure(#cnsq,
		NEW b_lambda(#altn,
			NEW b_variable(#cnsq)),
		a_empty_env)
# LET fn_false = \cnsq.\altn.altn
CREATE fn_false
	WITH b_closure(#cnsq,
		NEW b_lambda(#altn,
			NEW b_variable(#altn)),
		a_empty_env)
# LET fn_if = \pred.\cnsq.\altn.(pred(cnsq))(altn)
CREATE fn_if
	WITH b_closure(#pred,
		NEW b_lambda(#cnsq,
			NEW b_lambda(#altn,
			    NEW b_application(
			    	NEW b_application(
			    		NEW b_variable(#pred),
			    		NEW b_variable(#cnsq)
			    	),
			    	NEW b_variable(#altn)
			    )
			)
		),
		a_empty_env)
# ((if(true))(#a))(#b) -> #a
SEND (println, #eval, a_empty_env) TO
	NEW b_application(
		NEW b_application(
			NEW b_application(
				NEW b_literal(fn_if),
				NEW b_literal(fn_true)),
			NEW b_literal(#a)),
		NEW b_literal(#b))

#
# John Shutt's "Kernel" Language core
#

CREATE Fail WITH \msg.[ THROW (#Undefined, SELF, msg) ]

CREATE Inert WITH \(cust, req).[
	CASE req OF
	(#eval, _) : [ SEND SELF TO cust ]
	_ : [ THROW (#Not-Understood, SELF, req) ]
	END
]

LET Binding(symbol, value, next) = \(cust, req).[
	CASE req OF
	(#lookup, $symbol) : [ SEND value TO cust ]
	(#bind, $symbol, value') : [
		BECOME Binding(symbol, value', next)
		SEND Inert TO cust
	]
	_ : [ SEND (cust, req) TO next ]
	END
]
LET Scope(parent) = \(cust, req).[
	CASE req OF
	(#bind, symbol, value) : [
		CREATE next WITH Scope(parent)
		BECOME Binding(symbol, value, next)
		SEND Inert TO cust
	]
	_ : [ SEND (cust, req) TO next ]
	END
]

CREATE Nil WITH \(cust, req).[
	CASE req OF
	(#eval, _) : [ SEND SELF TO cust ]
	_ : [ THROW (#Not-Understood, SELF, req) ]
	END
]
LET Symbol(name) = \(cust, req).[
	CASE req OF
	(#eval, env) : [ SEND (cust, #lookup, SELF) TO env ]
	_ : [ THROW (#Not-Understood, SELF, req) ]
	END
]
LET Pair(left, right) = \(cust, req).[
	CASE req OF
	(#eval, env) : [
		SEND (k_comb, #eval, env) TO left
		CREATE k_comb WITH \comb.[
			SEND (cust, #comb, right, env) TO comb
		]
	]
	_ : [ THROW (#Not-Understood, SELF, req) ]
	END
]

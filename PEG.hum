#
# Parsing Expression Grammar (PEG)
#

# CRLF PEG
#
#   { "lang":"PEG", "ast":{ "kind":"grammar", "rules":{ <name>:<expression>, ... } } }
#
# primitive expressions:
#   { "kind":"nothing" } ==> []
#   { "kind":"terminal", "value":<any> } ==> <value>
#   { "kind":"rule", "name":<string> } ==> <value>
#   { "kind":"sequence", "of":[ <expression>, ... ] } ==> [ <value>, ... ]
#   { "kind":"alternative", "of":[ <expression>, ... ] } ==> <value>
#   { "kind":"negation", "next":<expression> } ==> null
#
# derived expressions:
#   { "kind":"anything" } ==> <value>
#   { "kind":"star", "expr":<expression> } ==> [] | [ <value>, ... ]
#   { "kind":"plus", "expr":<expression> } ==> [ <value>, ... ]
#   { "kind":"option", "expr":<expression> } ==> [] | [ <value> ]
#   { "kind":"suffix", "next":<expression> } ==> null
#   { "kind":"range", "from":<any>, "to":<any> } ==> <value>
#
